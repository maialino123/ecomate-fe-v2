/**
 * User-friendly Vietnamese error messages
 * For non-technical users
 */

export interface FriendlyError {
    title: string
    message: string
    suggestion?: string
}

/**
 * Common error messages in Vietnamese
 */
export const ERROR_MESSAGES = {
    // Authentication errors
    INVALID_CREDENTIALS: {
        title: 'ƒêƒÉng nh·∫≠p kh√¥ng th√†nh c√¥ng',
        message: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng',
        suggestion: 'Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin ƒëƒÉng nh·∫≠p c·ªßa b·∫°n',
    },
    ACCOUNT_NOT_FOUND: {
        title: 'T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i',
        message: 'Email n√†y ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω trong h·ªá th·ªëng',
        suggestion: 'Vui l√≤ng ki·ªÉm tra l·∫°i email ho·∫∑c ƒëƒÉng k√Ω t√†i kho·∫£n m·ªõi',
    },
    ACCOUNT_LOCKED: {
        title: 'T√†i kho·∫£n b·ªã kh√≥a',
        message: 'T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a t·∫°m th·ªùi',
        suggestion: 'Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£',
    },
    ACCOUNT_SUSPENDED: {
        title: 'T√†i kho·∫£n b·ªã t·∫°m ng∆∞ng',
        message: 'T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã t·∫°m ng∆∞ng ho·∫°t ƒë·ªông',
        suggestion: 'Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt',
    },
    ACCOUNT_PENDING: {
        title: 'T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c duy·ªát',
        message: 'Y√™u c·∫ßu ƒëƒÉng k√Ω c·ªßa b·∫°n ƒëang ch·ªù ƒë∆∞·ª£c duy·ªát',
        suggestion: 'B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c email th√¥ng b√°o khi t√†i kho·∫£n ƒë∆∞·ª£c k√≠ch ho·∫°t',
    },
    EMAIL_ALREADY_EXISTS: {
        title: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng',
        message: 'Email n√†y ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω trong h·ªá th·ªëng',
        suggestion: 'Vui l√≤ng s·ª≠ d·ª•ng email kh√°c ho·∫∑c ƒëƒÉng nh·∫≠p n·∫øu ƒë√¢y l√† t√†i kho·∫£n c·ªßa b·∫°n',
    },
    WEAK_PASSWORD: {
        title: 'M·∫≠t kh·∫©u kh√¥ng ƒë·ªß m·∫°nh',
        message: 'M·∫≠t kh·∫©u c·∫ßn t·ªëi thi·ªÉu 8 k√Ω t·ª±, bao g·ªìm ch·ªØ hoa, ch·ªØ th∆∞·ªùng v√† s·ªë',
        suggestion: 'Vui l√≤ng ch·ªçn m·∫≠t kh·∫©u m·∫°nh h∆°n ƒë·ªÉ b·∫£o v·ªá t√†i kho·∫£n c·ªßa b·∫°n',
    },

    // Network errors
    NETWORK_ERROR: {
        title: 'Kh√¥ng c√≥ k·∫øt n·ªëi Internet',
        message: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß',
        suggestion: 'Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi Internet c·ªßa b·∫°n v√† th·ª≠ l·∫°i',
    },
    TIMEOUT_ERROR: {
        title: 'H·∫øt th·ªùi gian ch·ªù',
        message: 'M√°y ch·ªß kh√¥ng ph·∫£n h·ªìi trong th·ªùi gian quy ƒë·ªãnh',
        suggestion: 'Vui l√≤ng th·ª≠ l·∫°i sau v√†i ph√∫t',
    },
    SERVER_ERROR: {
        title: 'L·ªói h·ªá th·ªëng',
        message: 'H·ªá th·ªëng ƒëang g·∫∑p s·ª± c·ªë t·∫°m th·ªùi',
        suggestion: 'Ch√∫ng t√¥i ƒëang kh·∫Øc ph·ª•c. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t',
    },

    // Permission errors
    UNAUTHORIZED: {
        title: 'Ch∆∞a ƒëƒÉng nh·∫≠p',
        message: 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán thao t√°c n√†y',
        suggestion: 'Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i',
    },
    FORBIDDEN: {
        title: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y',
        suggestion: 'Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n n·∫øu b·∫°n c·∫ßn quy·ªÅn truy c·∫≠p',
    },

    // Validation errors
    INVALID_EMAIL: {
        title: 'Email kh√¥ng h·ª£p l·ªá',
        message: 'ƒê·ªãnh d·∫°ng email kh√¥ng ƒë√∫ng',
        suggestion: 'Vui l√≤ng nh·∫≠p email theo ƒë·ªãnh d·∫°ng: example@email.com',
    },
    REQUIRED_FIELD: {
        title: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc',
        message: 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin',
        suggestion: 'C√°c tr∆∞·ªùng c√≥ d·∫•u (*) l√† b·∫Øt bu·ªôc',
    },

    // Generic errors
    UNKNOWN_ERROR: {
        title: 'ƒê√£ x·∫£y ra l·ªói',
        message: 'ƒê√£ c√≥ l·ªói kh√¥ng x√°c ƒë·ªãnh x·∫£y ra',
        suggestion: 'Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá h·ªó tr·ª£ n·∫øu l·ªói v·∫´n ti·∫øp di·ªÖn',
    },
} as const

/**
 * Map API error codes/messages to friendly Vietnamese messages
 */
export function getFriendlyError(error: any): FriendlyError {
    // Check status code
    const statusCode = error?.response?.status || error?.statusCode

    // Check error message from API
    const apiMessage = error?.response?.data?.message || error?.message || ''
    const apiError = error?.response?.data?.error || ''

    // Map by status code
    if (statusCode === 401) {
        if (
            apiMessage.toLowerCase().includes('invalid') ||
            apiMessage.toLowerCase().includes('wrong') ||
            apiMessage.toLowerCase().includes('incorrect')
        ) {
            return ERROR_MESSAGES.INVALID_CREDENTIALS
        }
        return ERROR_MESSAGES.UNAUTHORIZED
    }

    if (statusCode === 403) {
        if (apiMessage.toLowerCase().includes('suspended')) {
            return ERROR_MESSAGES.ACCOUNT_SUSPENDED
        }
        if (apiMessage.toLowerCase().includes('locked')) {
            return ERROR_MESSAGES.ACCOUNT_LOCKED
        }
        if (apiMessage.toLowerCase().includes('pending')) {
            return ERROR_MESSAGES.ACCOUNT_PENDING
        }
        return ERROR_MESSAGES.FORBIDDEN
    }

    if (statusCode === 404) {
        return ERROR_MESSAGES.ACCOUNT_NOT_FOUND
    }

    if (statusCode === 409) {
        if (apiMessage.toLowerCase().includes('email')) {
            return ERROR_MESSAGES.EMAIL_ALREADY_EXISTS
        }
    }

    if (statusCode === 422 || statusCode === 400) {
        if (apiMessage.toLowerCase().includes('email')) {
            return ERROR_MESSAGES.INVALID_EMAIL
        }
        if (apiMessage.toLowerCase().includes('password')) {
            return ERROR_MESSAGES.WEAK_PASSWORD
        }
        return ERROR_MESSAGES.REQUIRED_FIELD
    }

    if (statusCode === 500 || statusCode === 502 || statusCode === 503) {
        return ERROR_MESSAGES.SERVER_ERROR
    }

    // Map by error type
    if (error?.code === 'ECONNABORTED' || apiError === 'TIMEOUT') {
        return ERROR_MESSAGES.TIMEOUT_ERROR
    }

    if (error?.code === 'ERR_NETWORK' || apiError === 'NETWORK_ERROR' || statusCode === 0) {
        return ERROR_MESSAGES.NETWORK_ERROR
    }

    // Check API message keywords
    const lowerMessage = apiMessage.toLowerCase()

    if (
        lowerMessage.includes('invalid credential') ||
        lowerMessage.includes('wrong password') ||
        lowerMessage.includes('incorrect password')
    ) {
        return ERROR_MESSAGES.INVALID_CREDENTIALS
    }

    if (lowerMessage.includes('not found') || lowerMessage.includes('does not exist')) {
        return ERROR_MESSAGES.ACCOUNT_NOT_FOUND
    }

    if (lowerMessage.includes('already exists') || lowerMessage.includes('already registered')) {
        return ERROR_MESSAGES.EMAIL_ALREADY_EXISTS
    }

    if (lowerMessage.includes('suspended')) {
        return ERROR_MESSAGES.ACCOUNT_SUSPENDED
    }

    if (lowerMessage.includes('locked') || lowerMessage.includes('blocked')) {
        return ERROR_MESSAGES.ACCOUNT_LOCKED
    }

    if (lowerMessage.includes('pending') || lowerMessage.includes('awaiting approval')) {
        return ERROR_MESSAGES.ACCOUNT_PENDING
    }

    if (lowerMessage.includes('network') || lowerMessage.includes('connection')) {
        return ERROR_MESSAGES.NETWORK_ERROR
    }

    // Default unknown error
    return {
        ...ERROR_MESSAGES.UNKNOWN_ERROR,
        // Include technical message for debugging
        message: apiMessage || ERROR_MESSAGES.UNKNOWN_ERROR.message,
    }
}

/**
 * Format error for display in Toast
 */
export function formatErrorForToast(error: any): { title: string; message: string } {
    const friendlyError = getFriendlyError(error)

    return {
        title: friendlyError.title,
        message: friendlyError.suggestion
            ? `${friendlyError.message}. ${friendlyError.suggestion}`
            : friendlyError.message,
    }
}

/**
 * Format error for inline display (with suggestion separated)
 */
export function formatErrorForInline(error: any): string {
    const friendlyError = getFriendlyError(error)

    let message = friendlyError.message
    if (friendlyError.suggestion) {
        message += `\nüí° ${friendlyError.suggestion}`
    }

    return message
}
